name: build and run tests

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
  BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    # # install and cache dependencies
    # - name: Restore Boost cache
    #   uses: actions/cache@v2
    #   id: cache-boost
    #   with:
    #     path: ${{env.BOOST_ROOT}}
    #     key: boost

    # - name: Install Boost
    #   if: steps.cache-boost.outputs.cache-hit != 'true'
    #   run: |
    #     if [ "$OS" == "Windows_NT" ]; then
    #       # fix up paths to be forward slashes consistently
    #       BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
    #     fi
    #     mkdir -p $BOOST_ROOT
    #     curl --progress-bar --location --output $BOOST_ROOT/download.tar.bz2 $BOOST_URL
    #     7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar.bz2 -y -bd
    #     7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar -y -bd
    #     cd $BOOST_ROOT && cp -r boost_*/* .
    #     rm -rf boost_*/* download.tar.bz2 download.tar
    #   shell: bash

    - name: install boost
      run: sudo apt install libboost-all-dev

    - name: install qt5
      uses: jurplel/install-qt-action@v2
      with:
        install-deps: 'true'
        modules: 'qtcharts'
        setup-python: 'false'

    - uses: actions/checkout@master
      with:
        repository:  ybainier/Hypodermic 
        path: ./Hypodermic

    - name: build and install Hypodermic
      run: |
            mkdir ./Hypodermic/build
            cd ./Hypodermic/build
            cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
            make -j3
            sudo make install

    - name: create build environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure cmake
      # Use a bash shell so we can use the same syntax for environment svariable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    # - name: Build
    #   working-directory: ${{runner.workspace}}/build
    #   shell: bash
    #   # Execute the build.  You can specify a specific target with "--target <NAME>"
    #   run:
    #     cmake -S . -B build -DBoost_INCLUDE_DIR=$BOOST_ROOT/include
    #   env:
    #     MAKEFLAGS: "-j2"
    #     # cmake --build build -j2
    # build project
    - name: cmake build
      working-directory: ${{runner.workspace}}/build
      run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
            make -j3            
    # - name: cmake build
    #   run: cmake -Bbuild -H.
    # - name: cmake make
    #   run: cmake --build build/ --target all
    #   env:
    #     MAKEFLAGS: "-j2"
    - name: run tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -j3 -C $BUILD_TYPE -T test --output-on-failure
      #  --test-dir ${{runner.workspace}}/build
